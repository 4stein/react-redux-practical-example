{"version":3,"sources":["reducers/characterReducer.js","reducers/counterReducer.js","reducers/todoReducer.js","reducers/rootReducer.js","views/SimpleCounter.js","components/TodoItem.js","views/TodoList.js","components/EditNameCard.js","views/NameCard.js","App.js","serviceWorker.js","index.js"],"names":["initState","name","occupation","age","characterReducer","state","action","type","payload","counter","counterReducer","todoList","id","content","todoReducer","rootReducer","combineReducers","characters","myCounter","todos","SimpleCounter","useSelector","dispatch","useDispatch","className","onClick","TodoItem","props","key","item","todoId","newTodoList","filter","removeTodoItem","TodoList","useState","inputTodo","setInputTodo","errMsg","setErrMsg","length","map","onChange","e","target","value","placeholder","htmlFor","trim","newTodoObject","Math","random","EditNameCard","person","NameCard","isEdit","setEdit","App","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ab7f4a7.chunk.js","sourcesContent":["//Reducer for character information Initialize State\nconst initState = {\n    name: \"Sunny Xue\",\n    occupation: \"Ninja\",\n    age: 16\n}\n\n//Define Actions\nconst characterReducer = (state = initState, action) => {\n    switch (action.type) {\n            //Change character name\n        case 'CHANGE_NAME':\n            return {\n                ...state,\n                name: action.payload\n            }\n\n        case 'CHANGE_OCCUPATION':\n            return {\n                ...state,\n                occupation: action.payload\n            }\n        case 'CHANGE_AGE':\n            return {\n                ...state,\n                age: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default characterReducer;","const initState = {\n    counter: 5,\n }\n \n const counterReducer = (state = initState, action) => {\n     switch (action.type) {\n       case 'INCREMENT_COUNT':\n         return {...state,\n                 counter:state.counter+1      \n         }\n       case 'INCREMENT_COUNT_TEN':\n            return {...state,\n                    counter:state.counter+10      \n            }\n\n        case 'DOUBLE_COUNT':\n            return {...state,\n                    counter:state.counter*2      \n            }\n      case 'DECREMENT_COUNT_TEN':\n          return {...state,\n                  counter:state.counter-10      \n        }\n       case 'DECREMENT_COUNT':\n           return {...state,\n             counter:state.counter-1      \n     }\n       case 'RESET_COUNT':\n           return {...state,\n             counter:0     \n     } \n       default:\n         return state\n     }\n   }\n \n export default counterReducer;","const initState = {\n    todoList: [\n        {\n            id: 1,\n            content: 'Play video game'\n        }, {\n            id: 2,\n            content: 'Learn nodejs & python'\n        }, {\n            id: 3,\n            content: 'Join meetup event'\n        }\n    ]\n}\n\nconst todoReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return {\n                ...state,\n                todoList: [\n                    ...state.todoList,\n                    action.payload\n                ]\n            }\n        case 'REMOVE_TODO':\n            return {\n                ...state,\n                todoList: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default todoReducer;","import characterReducer from './characterReducer';\nimport counterReducer from './counterReducer';\nimport todoReducer from './todoReducer';\nimport {combineReducers} from 'redux';\n\n//Combine all the sub reducers\nconst rootReducer = combineReducers({\n    characters: characterReducer,\n    myCounter: counterReducer,\n    todos:todoReducer\n})\n\nexport default rootReducer","import React from 'react';\nimport { useSelector,useDispatch } from 'react-redux';\n\nconst SimpleCounter = () => {\n  //Get counter from counterReducer\n  const counter = useSelector(state => state.myCounter.counter);\n  \n  //Use for all the dispatch actions\n  const dispatch = useDispatch();\n\n    return (         \n        <section id=\"section-counter\">\n        <h3 className=\"center-align white-text blue\">Simple Counter</h3>\n        <h5 className=\"center-align\">{counter}</h5>\n        <div className=\"row counter-btns\">\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'DOUBLE_COUNT' })}>\n        x2\n        </button>\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'INCREMENT_COUNT_TEN' })}>\n        +10\n        </button>\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'INCREMENT_COUNT' })}>\n        +1\n        </button>\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'DECREMENT_COUNT' })}>\n        -1\n        </button>\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'DECREMENT_COUNT_TEN' })}>\n        -10\n        </button>\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'RESET_COUNT' })}>\n        Reset\n        </button>\n        </div>\n     \n        </section>\n     );\n}\n \nexport default SimpleCounter;","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\n//Single todo item component\nconst TodoItem = (props) => {\n    //Get todoList from todoReducer\n    const todoList = useSelector(state => state.todos.todoList)\n    //Use for all the dispatch actions\n    const dispatch = useDispatch();\n\n    //Remove single todo in the list\n    const removeTodoItem = (todoId) => {\n        //filter to get the todoId which need to be remove\n        let newTodoList = todoList.filter(item => item.id !== todoId);\n        dispatch({type: 'REMOVE_TODO', payload: newTodoList})\n\n    }\n\n    return (\n        <li className=\"collection-item\" key={props.item.id}>{props.item.content}\n            <span\n                onClick={() => {\n                removeTodoItem(props.item.id)\n            }}\n                className=\"secondary-content\">\n                <i className=\"remove-btn material-icons blue-text\">clear</i>\n            </span>\n        </li>\n    );\n}\n\nexport default TodoItem;","import React,{useState} from 'react';\nimport { useSelector,useDispatch } from 'react-redux';\nimport TodoItem from '../components/TodoItem';\n\n\nconst TodoList = () => {\n\n  //#2 Used to get a single attribute or object inside the Reducer\n\n  //Get todoList from todoReducer\n  const todoList = useSelector(state => state.todos.todoList);\n\n  //Use for all the dispatch actions\n  const dispatch = useDispatch();\n\n  //Local state for the input\n  const [inputTodo,setInputTodo] =  useState('');\n  //Local state for the input error message\n  const [errMsg,setErrMsg] = useState('');\n\n  //Handle onChange event\n  const handleInput = (e)=>{\n    setInputTodo(e.target.value);\n  }\n\n  //Handle onClick event\n  const addNewTodo = ()=>{\n    //Valid input value\n    if(inputTodo.trim().length>1)\n    {   \n        setErrMsg('');\n        let newTodoObject={\n            id: Math.random(),\n            content:inputTodo\n        }\n         //Add new todo item into List with the action\n        dispatch({type:'ADD_TODO',payload:newTodoObject});\n        //Empty input \n        setInputTodo('');\n    }\n    else{\n        //Display Error message\n        setErrMsg('Please input something...');\n    }\n\n   \n  }\n\n    return (    \n        <section id=\"section-todo\">\n        <h3 className=\"center-align white-text blue\">Todo List</h3>\n        {\n            todoList.length>0?\n            (<ul className=\"collection\">\n            {\n              todoList.map(item => {\n                return <TodoItem key={item.id} item={item} />\n              })\n            }\n          </ul>):\n          (<p className=\"center-align\">You don't have anything to do! Awesome!</p>)\n        }\n       \n        <div className=\"row\">\n        <p className=\"red-text err-msg col s12 center-align\">\n        {errMsg}\n        </p>\n        <div className=\"input-field col s10\">\n        <input onChange={handleInput} value={inputTodo} placeholder=\"Add todo...\" id=\"todo-input\" type=\"text\" />\n        <label htmlFor=\"todo-input\" className=\"active\">New Todo</label>\n        </div>\n      \n        <button className=\"btn col s2 blue\" onClick={addNewTodo} >Add</button>\n        </div>\n      </section>\n      );\n}\n \nexport default TodoList;","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nconst EditNameCard = () => {\n    //Get the whole state from characterReducer\n    const person = useSelector(state => state.characters);\n\n    //Use for all the dispatch actions\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"row\">\n            <div className=\"row\">\n                <div className=\"input-field col s4\">\n                    <input\n                        value={person.name}\n                        id=\"name\"\n                        type=\"text\"\n                        onChange={e => dispatch({type: 'CHANGE_NAME', payload: e.target.value})}/>\n                    <label htmlFor=\"name\" className=\"active\">Name</label>\n                </div>\n                <div className=\"input-field col s4\">\n                    <input\n                        value={person.occupation}\n                        id=\"occupation\"\n                        type=\"text\"\n                        onChange={e => dispatch({type: 'CHANGE_OCCUPATION', payload: e.target.value})}/>\n                    <label htmlFor=\"occupation\" className=\"active\">Occupation</label>\n                </div>\n                <div className=\"input-field col s4\">\n                    <input\n                        value={person.age}\n                        id=\"age\"\n                        type=\"number\"\n                        onChange={e => dispatch({type: 'CHANGE_AGE', payload: e.target.value})}/>\n                    <label htmlFor=\"age\" className=\"active\">Age</label>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default EditNameCard;","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\nimport EditNameCard from '../components/EditNameCard';\n\nconst NameCard = () => {\n\n    // useSelector function for getting the specific reducer we need Used to get the\n    // whole reducer object like getting characterReducer Get the whole state from\n    // characterReducer\n    const person = useSelector(state => state.characters);\n\n    //Create local state for trigger edit form\n    const [isEdit,\n        setEdit] = useState(false);\n\n    //Handle edit button onclick in name card\n    const toggleEditBtn = () => {\n        setEdit(!isEdit);\n    }\n\n    return (\n        <section id=\"section-namecard\">\n            <h3 className=\"center-align white-text blue\">Name Card</h3>\n            <div className=\"card grey darken-1 namecard\">\n                <div className=\"card-content white-text\">\n                    <p className=\"card-title\">{person.name}</p>\n                    <p>Occupation: {person.occupation}</p>\n                    <p>Age: {person.age}</p>\n                    <button\n                        onClick={toggleEditBtn}\n                        className=\"btn-floating halfway-fab waves-effect waves-light orange\">\n                        {isEdit\n                            ? (\n                                <i className=\"material-icons\">clear</i>\n                            )\n                            : (\n                                <i className=\"material-icons\">create</i>\n                            )\n}</button>\n                </div>\n            </div>\n            {isEdit && <EditNameCard/>\n}\n\n        </section>\n    );\n}\n\nexport default NameCard;","import React from 'react';\nimport SimpleCounter from './views/SimpleCounter';\nimport TodoList from './views/TodoList';\nimport NameCard from './views/NameCard';\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <main className=\"container\">\n\n                {/* Please check /views/SimpleCounter.js for detail*/}\n                <SimpleCounter/>\n\n                <div className=\"divider\"></div>\n\n                {/* Please check /views/NameCard.js for detail*/}\n                <NameCard/>\n\n                <div className=\"divider\"></div>\n\n                {/* Please check /views/TodoList.js for detail*/}\n                <TodoList/>\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer)\n\n\nReactDOM.render(\n<Provider store={store}>\n\t<App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}